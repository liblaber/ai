// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// @seed="tsx prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DataSource {
  id           String                  @id @default(cuid())
  name         String
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @updatedAt @map("updated_at")
  createdBy    User                    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String                  @map("created_by_id")
  environments EnvironmentDataSource[]

  directPermissions Permission[]

  @@map("data_source")
}

enum DataSourcePropertyType {
  CONNECTION_URL
  ACCESS_TOKEN
  REFRESH_TOKEN
  CLIENT_ID
  CLIENT_SECRET
  API_KEY
}

model DataSourceProperty {
  id        String                 @id @default(cuid())
  type      DataSourcePropertyType
  createdAt DateTime               @default(now()) @map("created_at")
  updatedAt DateTime               @updatedAt @map("updated_at")

  environmentVariableId String              @map("environment_variable_id")
  environmentVariable   EnvironmentVariable @relation(fields: [environmentVariableId], references: [id], onDelete: Cascade)

  environmentId         String                @map("environment_id")
  dataSourceId          String                @map("data_source_id")
  environmentDataSource EnvironmentDataSource @relation(fields: [environmentId, dataSourceId], references: [environmentId, dataSourceId], onDelete: Cascade)

  @@map("data_source_property")
}

model Website {
  id            String       @id @default(cuid())
  siteId        String?      @map("site_id")
  siteName      String?      @map("site_name")
  siteUrl       String?      @map("site_url")
  chatId        String       @map("chat_id")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  isPublic      Boolean      @default(false) @map("is_public")
  createdBy     User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById   String       @map("created_by_id")
  environmentId String?      @map("environment_id")
  environment   Environment? @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  directPermissions Permission[]

  @@map("website")
}

model Environment {
  id                   String                  @id @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime                @default(now()) @map("created_at")
  updatedAt            DateTime                @updatedAt @map("updated_at")
  dataSources          EnvironmentDataSource[]
  websites             Website[]
  environmentVariables EnvironmentVariable[]
  directPermissions    Permission[]

  @@unique([name])
  @@map("environment")
}

enum EnvironmentVariableType {
  GLOBAL
  DATA_SOURCE
}

model EnvironmentVariable {
  id          String                  @id @default(cuid())
  key         String
  value       String
  description String?
  type        EnvironmentVariableType

  environmentId String      @map("environment_id")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  createdById String @map("created_by_id")
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  dataSourceProperties DataSourceProperty[]

  @@unique([key, environmentId])
  @@map("environment_variable")
}

model EnvironmentDataSource {
  environmentId String      @map("environment_id")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  dataSourceId String     @map("data_source_id")
  dataSource   DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)

  dataSourceProperties DataSourceProperty[]

  conversations Conversation[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([environmentId, dataSourceId])
  @@index([environmentId], name: "idx_environment_data_source_environment_id")
  @@index([dataSourceId], name: "idx_environment_data_source_data_source_id")
  @@map("environment_data_source")
}

model SchemaCache {
  id             String   @id @default(cuid())
  connectionHash String   @unique @map("connection_hash")
  schemaData     String   @map("schema_data")
  suggestions    String[] @map("suggestions")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("schema_cache")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  content        String
  model          String
  inputTokens    Int
  outputTokens   Int
  finishReason   String
  role           String       @default("USER") @map("role")
  createdAt      DateTime     @default(now())
  snapshot       Snapshot?
  annotations    Json?

  @@map("message")
}

model Conversation {
  id          String     @id @default(cuid())
  description String?
  starterId   String     @map("starter_id")
  messages    Message[]
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  snapshots   Snapshot[]

  environmentId         String                @map("environment_id")
  dataSourceId          String                @map("data_source_id")
  environmentDataSource EnvironmentDataSource @relation(fields: [environmentId, dataSourceId], references: [environmentId, dataSourceId])

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("conversation")
}

enum StorageType {
  FILE_SYSTEM
  DATABASE
}

model Snapshot {
  id             String       @id @default(cuid())
  storageType    StorageType
  storageKey     String
  createdAt      DateTime     @default(now()) @map("created_at")
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messageId      String?      @unique
  message        Message?     @relation(fields: [messageId], references: [id], onDelete: SetNull)

  @@map("snapshot")
}

enum RoleScope {
  GENERAL
  ENVIRONMENT
  DATA_SOURCE
  WEBSITE
}

model Role {
  id          String       @id @default(cuid())
  name        String
  description String?
  scope       RoleScope    @default(GENERAL)
  resourceId  String?      @map("resource_id")
  users       UserRole[]
  permissions Permission[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  UserInvite  UserInvite[]

  @@map("role")
}

enum DeprecatedRole {
  ADMIN
  MEMBER
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  email                String
  emailVerified        Boolean
  image                String?
  createdAt            DateTime
  updatedAt            DateTime
  sessions             Session[]
  accounts             Account[]
  conversations        Conversation[]
  roles                UserRole[]
  role                 DeprecatedRole        @default(MEMBER)
  dataSources          DataSource[]
  websites             Website[]
  environmentVariables EnvironmentVariable[]
  telemetryEnabled     Boolean?

  isAnonymous Boolean?

  @@unique([email])
  @@map("user")
}

model UserRole {
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    String   @map("role_id")
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, roleId])
  @@index([roleId], name: "idx_user_role_role_id")
  @@index([userId], name: "idx_user_role_user_id")
  @@map("user_role")
}

enum PermissionAction {
  manage // Full permission action
  create
  read
  update
  delete
}

enum PermissionResource {
  all // Full resource access
  Environment
  DataSource
  Website
  BuilderApp
  AdminApp
  EnvironmentVariable
}

model Permission {
  id            String             @id @default(cuid())
  roleId        String             @map("role_id")
  role          Role               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  action        PermissionAction
  resource      PermissionResource
  environmentId String?            @map("environment_id")
  environment   Environment?       @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  dataSourceId  String?            @map("data_source_id")
  dataSource    DataSource?        @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  websiteId     String?            @map("website_id")
  website       Website?           @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  createdAt     DateTime           @default(now())

  @@index([roleId], name: "idx_permission_role_id")
  @@index([environmentId], name: "idx_permission_environment_id")
  @@index([dataSourceId], name: "idx_permission_data_source_id")
  @@index([websiteId], name: "idx_permission_website_id")
  @@map("permission")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserInvite {
  id             String       @id
  email          String
  roleId         String
  status         InviteStatus @default(PENDING)
  invitedBy      String
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  existingUserId String?

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([email, status])
  @@index([email])
  @@index([status])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}
