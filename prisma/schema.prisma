// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// @seed="tsx prisma/seed.ts"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DataSource {
  id               String         @id @default(cuid())
  name             String
  connectionString String         @map("connection_string")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  conversations    Conversation[]
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  @@map("data_source")
}

model Website {
  id        String   @id @default(cuid())
  siteId    String?  @map("site_id")
  siteName  String?  @map("site_name")
  siteUrl   String?  @map("site_url")
  chatId    String   @map("chat_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isPublic  Boolean  @default(false) @map("is_public")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("website")
}

model SchemaCache {
  id             String   @id @default(cuid())
  connectionHash String   @unique @map("connection_hash")
  schemaData     String   @map("schema_data")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("schema_cache")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  content        String
  model          String
  inputTokens    Int
  outputTokens   Int
  finishReason   String
  role           String       @default("USER") @map("role")
  createdAt      DateTime     @default(now())
  snapshot       Snapshot?
  annotations    Json?

  @@map("message")
}

model Conversation {
  id           String     @id @default(cuid())
  description  String?
  starterId    String     @map("starter_id")
  messages     Message[]
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  snapshots    Snapshot[]
  dataSourceId String
  dataSource   DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@map("conversation")
}

enum StorageType {
  FILE_SYSTEM
  DATABASE
}

model Snapshot {
  id             String       @id @default(cuid())
  storageType    StorageType
  storageKey     String
  createdAt      DateTime     @default(now()) @map("created_at")
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messageId      String?      @unique
  message        Message?     @relation(fields: [messageId], references: [id], onDelete: SetNull)

  @@map("snapshot")
}

enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  dataSources      DataSource[]
  conversations    Conversation[]
  websites         Website[]
  role             UserRole       @default(MEMBER)
  organizationId   String?
  organization     Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  telemetryEnabled Boolean?

  isAnonymous Boolean?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  domain    String?  @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]

  @@map("organization")
}
