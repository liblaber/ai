name: 🔍 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.tool-versions'
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Generate Prisma client
        run: pnpm prisma:generate

      - name: 🔧 Install ESLint globally
        run: pnpm add -g eslint

      - name: 🔍 Run ESLint
        run: pnpm lint

      - name: 🎨 Check Prettier formatting
        run: pnpm exec prettier --check .

      - name: 📝 TypeScript type checking
        run: pnpm typecheck

  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.tool-versions'
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Generate Prisma client
        run: pnpm prisma:generate

      - name: 🏗️ Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: 🧪 Run tests
        run: pnpm test

  all-checks:
    name: ✅ All Checks Passed
    runs-on: ubuntu-latest
    needs: [quality, build-and-test]
    if: always()

    steps:
      - name: ✅ Check all jobs
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.build-and-test.result }}" == "success" ]]; then
            echo "🎉 All checks passed!"
            echo "## ✅ CI Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All quality checks, tests, and builds completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed!"
            echo "## ❌ CI Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "One or more checks failed. Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
