<examples>
  <example>
    <user_prompt>Create analytics dashboard with insights about users growth and table with all builds</user_prompt>

    <assistant_response>
      I'll create analytics dashboard to visualize user growth data and a paginated table for builds data.

      <liblabArtifact id="analytics-dashboard" title="Analytics Dashboard">
        <liblabAction type="commit-message">Add analytics dashboard with user growth and builds table</liblabAction>

        <liblabAction type="file" filePath="app/routes/analytics-dashboard/components/KeyMetrics.tsx">
import { UserCheck, UserPlus, Users, UserX } from 'lucide-react';
import { QuickInfoCard } from '@/components/building-blocks/quick-info-card/quick-info-card';

export const keyMetricsQuery = `
  SELECT
    COUNT(*) as total_users,
    COUNT(*) FILTER (WHERE is_email_verified = true) as verified_users,
    COUNT(*) FILTER (WHERE is_email_verified = false) as unverified_users,
    COUNT(*) FILTER (WHERE created_at >= NOW() - INTERVAL '6 months') as new_users_last_6_months
  FROM users
`;

export type KeyMetricsData = {
  total_users: number;
  verified_users: number;
  unverified_users: number;
  new_users_last_6_months: number;
};

interface KeyMetricsProps {
  data: KeyMetricsData[];
}

export function KeyMetrics({ data }: KeyMetricsProps) {
  const totals = data?.[0];
  if (!totals) {
    return null;
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <QuickInfoCard
        title="Total Users"
        description="All registered users"
        icon={<Users className="h-5 w-5 text-blue-500" />}
      >
        <div className="text-3xl font-bold">{totals.total_users}</div>
      </QuickInfoCard>

      <QuickInfoCard
        title="New Users (Last 6 Months)"
        description="Users who joined recently"
        icon={<UserPlus className="h-5 w-5 text-green-500" />}
      >
        <div className="text-3xl font-bold">{totals.new_users_last_6_months}</div>
      </QuickInfoCard>

      <QuickInfoCard
        title="Verified Users"
        description="Users with verified email"
        icon={<UserCheck className="h-5 w-5 text-emerald-500" />}
      >
        <div className="text-3xl font-bold">{totals.verified_users}</div>
      </QuickInfoCard>

      <QuickInfoCard
        title="Unverified Users"
        description="Users with unverified email"
        icon={<UserX className="h-5 w-5 text-amber-500" />}
      >
        <div className="text-3xl font-bold">{totals.unverified_users}</div>
      </QuickInfoCard>
    </div>
  );
}
        </liblabAction>

        <liblabAction type="file" filePath="app/routes/analytics-dashboard/components/SignupMethodChart.tsx">
import { Bar, BarChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';
import { UniversalChartCard } from '@/components/building-blocks/universal-chart-card/universal-chart-card';

export const signupMethodQuery = `
        SELECT
          signup_method,
          COUNT(*) as count
        FROM users
        GROUP BY signup_method
      `;

export type SignupMethodData = {
  signup_method: string;
  count: number;
};

interface SignupMethodChartProps {
  data: SignupMethodData[];
}

export function SignupMethodChart({ data }: SignupMethodChartProps) {
  const chartConfig = {
    count: {
      label: 'Users',
      color: 'var(--chart-7)',
    },
  };

  return (
    <UniversalChartCard
      title="Users by Signup Method"
      description="Distribution of user signup methods"
      chartConfig={chartConfig}
    >
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={data}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="signup_method" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="count" stroke="var(--chart-7-stroke)" fill="var(--chart-7)" />
        </BarChart>
      </ResponsiveContainer>
    </UniversalChartCard>
  );
}
        </liblabAction>

        <liblabAction type="file" filePath="app/routes/analytics-dashboard/components/UserGrowthChart.tsx">
import { Area, AreaChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';
import { UniversalChartCard } from '@/components/building-blocks/universal-chart-card/universal-chart-card';

export const userGrowthQuery = `
  SELECT
    DATE_TRUNC('month', created_at) as month,
    COUNT(*) as new_users
  FROM users
  WHERE
    created_at >= NOW() - INTERVAL '6 months'
  GROUP BY DATE_TRUNC('month', created_at)
  ORDER BY month ASC
`;

export type UserGrowthData = {
  month: string;
  new_users: number;
};

interface UserGrowthChartProps {
  data: UserGrowthData[];
}

export function UserGrowthChart({ data }: UserGrowthChartProps) {
  const formattedData = data.map((item) => ({
    ...item,
    month: new Date(item.month).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
  }));

  const chartConfig = {
    new_users: {
      label: 'New Users',
      color: 'var(--chart-1)',
    },
  };

  return (
    <UniversalChartCard
      title="User Growth Over Time"
      description="New user registrations by month"
      chartConfig={chartConfig}
    >
      <ResponsiveContainer width="100%" height={300}>
        <AreaChart data={formattedData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="month" />
          <YAxis />
          <Tooltip />
          <Area
            type="monotone"
            dataKey="new_users"
            stroke="var(--chart-1-stroke)"
            fill="var(--chart-1)"
            fillOpacity={0.3}
          />
        </AreaChart>
      </ResponsiveContainer>
    </UniversalChartCard>
  );
}
        </liblabAction>

        <liblabAction type="file" filePath="app/routes/resources.builds.ts">
import { executeQuery } from '@/db/execute-query';
import {
  BuildCountData,
  BuildData,
  buildsCountQuery,
  buildsQuery,
  BuildStatus,
} from '@/routes/analytics-dashboard/components/BuildsTable';

export async function action({ request }: { request: Request }) {
  if (request.method !== 'POST') {
    return Response.json({ error: 'Method not allowed' }, { status: 405 });
  }

  try {
    const formData = await request.formData();
    const status = formData.get('status') as BuildStatus;
    const page = parseInt(formData.get('page') as string) || 1;
    const limit = parseInt(formData.get('limit') as string) || 10;
    const offset = (page - 1) * limit;

    if (!status) {
      return Response.json({
        isError: true,
        errorMessage: 'Status is required',
      });
    }

    const buildsCount = await executeQuery<BuildCountData>(buildsCountQuery, [status]);
    if (buildsCount.isError) {
      return Response.json(buildsCount);
    }

    const builds = await executeQuery<BuildData>(buildsQuery, [status, limit.toString(), offset.toString()]);
    if (builds.isError) {
      return Response.json(builds);
    }

    return Response.json({
      data: {
        builds: builds.data,
        buildsCount: buildsCount.data[0].total,
      },
      isError: false,
    });
  } catch (error) {
    console.error('Error fetching builds:', error);
    return Response.json({ error: 'Failed to fetch builds' }, { status: 500 });
  }
}
        </liblabAction>

        <liblabAction type="file" filePath="app/routes/analytics-dashboard/BuildsTable.tsx">
import { UniversalTableCard } from '@/components/building-blocks/universal-table-card/universal-table-card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { useState } from 'react';

export const buildsQuery = `
  SELECT b.id,
         b.build_number,
         b.status,
         b.build_type,
         b.start_time,
         b.end_time,
         b.duration,
         a.name  as api_name,
         u.email as created_by
  FROM builds b
         LEFT JOIN apis a ON b.api_id = a.id
         LEFT JOIN users u ON b.created_by_id = u.id
  WHERE b.is_deleted = false
    AND b.status = $1
  ORDER BY b.created_at DESC
    LIMIT $2
  OFFSET $3
`;

export const buildsCountQuery = `
  SELECT COUNT(*) as total
  FROM builds b
  WHERE b.is_deleted = false AND b.status = $1
`;

export enum BuildStatus {
  SUCCESS = 'SUCCESS',
  FAILURE = 'FAILURE',
  IN_PROGRESS = 'IN_PROGRESS',
}

export interface BuildData {
  id: string;
  build_number: string;
  status: BuildStatus;
  build_type: string[];
  start_time: string;
  end_time: string;
  duration: string;
  api_name: string;
  created_by: string;
}

export interface BuildCountData {
  total: number;
}

const ITEMS_PER_PAGE = 10;

interface BuildsTableProps {
  builds: BuildData[];
  buildsCount: number;
  isLoading: boolean;
  onFiltersChange?: (filters: { page: number; status: BuildStatus }) => void;
}

export function BuildsTable({ builds, buildsCount, isLoading, onFiltersChange }: BuildsTableProps) {
  const [status, setStatus] = useState<BuildStatus>(BuildStatus.SUCCESS);
  const [currentPage, setCurrentPage] = useState(1);

  const handleStatusChange = (value: string) => {
    const buildStatus = value as BuildStatus;
    setStatus(buildStatus);
    setCurrentPage(1);
    onFiltersChange?.({ page: 1, status: buildStatus });
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    onFiltersChange?.({ page, status });
  };

  const totalPages = buildsCount > 0 ? Math.ceil(buildsCount / ITEMS_PER_PAGE) : 0;

  const StatusFilter = (
    <Select value={status} onValueChange={handleStatusChange}>
      <SelectTrigger className="w-[180px]">
        <SelectValue placeholder="Select status" />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value={BuildStatus.SUCCESS}>Success</SelectItem>
        <SelectItem value={BuildStatus.FAILURE}>Failure</SelectItem>
        <SelectItem value={BuildStatus.IN_PROGRESS}>In Progress</SelectItem>
      </SelectContent>
    </Select>
  );

  const PaginationControls = (
    <div className="flex items-center justify-between">
      <div className="text-sm text-muted-foreground">
        Page {currentPage} of {totalPages}
      </div>
      <div className="flex gap-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => handlePageChange(currentPage - 1)}
          disabled={currentPage === 1 || isLoading}
        >
          Previous
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => handlePageChange(currentPage + 1)}
          disabled={currentPage === totalPages || isLoading}
        >
          Next
        </Button>
      </div>
    </div>
  );

  return (
    <UniversalTableCard
      title="Builds"
      description="List of all builds with their status and details"
      CardHeaderComponent={StatusFilter}
      CardFooterComponent={PaginationControls}
    >
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Build Number</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Type</TableHead>
            <TableHead>API</TableHead>
            <TableHead>Created By</TableHead>
            <TableHead>Start Time</TableHead>
            <TableHead>End Time</TableHead>
            <TableHead>Duration</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {isLoading ? (
            <TableRow>
              <TableCell colSpan={8} className="text-center">
                Loading...
              </TableCell>
            </TableRow>
          ) : builds.length === 0 ? (
            <TableRow>
              <TableCell colSpan={8} className="text-center">
                No builds found
              </TableCell>
            </TableRow>
          ) : (
            builds.map((build: BuildData) => (
              <TableRow key={build.id}>
                <TableCell>{build.build_number}</TableCell>
                <TableCell>{build.status}</TableCell>
                <TableCell>{build.build_type}</TableCell>
                <TableCell>{build.api_name}</TableCell>
                <TableCell>{build.created_by}</TableCell>
                <TableCell>{new Date(build.start_time).toLocaleString()}</TableCell>
                <TableCell>{build.end_time ? new Date(build.end_time).toLocaleString() : '-'}</TableCell>
                <TableCell>{build.duration}</TableCell>
              </TableRow>
            ))
          )}
        </TableBody>
      </Table>
    </UniversalTableCard>
  );
}
        </liblabAction>

        <liblabAction type="file" filePath="app/routes/analytics-dashboard.tsx">
import { useFetcher } from '@remix-run/react';
import { KeyMetrics, KeyMetricsData, keyMetricsQuery } from '@/routes/analytics-dashboard/components/KeyMetrics';
import {
  signupMethodQuery,
  SignupMethodChart,
  SignupMethodData,
} from '@/routes/analytics-dashboard/components/SignupMethodChart';
import {
  userGrowthQuery,
  UserGrowthChart,
  UserGrowthData,
} from '@/routes/analytics-dashboard/components/UserGrowthChart';
import { BuildData, BuildsTable, BuildStatus } from '@/routes/analytics-dashboard/components/BuildsTable';
import { executeQuery, QueryData } from '@/db/execute-query';
import { LoaderError } from '@/types/loader-error';
import { WithErrorHandling } from '@/components/hoc/error-handling-wrapper/error-handling-wrapper';
import { useEffect } from 'react';

export async function loader(): Promise<ExampleDashboardProps | LoaderError> {
  try {
    const [keyMetrics, usersBySignupMethod, userGrowth] = await Promise.all([
      executeQuery<KeyMetricsData>(keyMetricsQuery),
      executeQuery<SignupMethodData>(signupMethodQuery),
      executeQuery<UserGrowthData>(userGrowthQuery),
    ]);

    return {
      keyMetrics,
      usersBySignupMethod,
      userGrowth,
    };
  } catch (error) {
    console.error('Error in dashboard loader:', error);
    return { error: error instanceof Error ? error.message : 'Failed to load dashboard data' };
  }
}

interface ExampleDashboardProps {
  keyMetrics: QueryData<KeyMetricsData[]>;
  userGrowth: QueryData<UserGrowthData[]>;
  usersBySignupMethod: QueryData<SignupMethodData[]>;
}

export default function AnalyticsDashboard({ keyMetrics, userGrowth, usersBySignupMethod }: ExampleDashboardProps) {
  const buildsFetcher = useFetcher<QueryData<{ builds: BuildData[]; buildsCount: number }>>();

  useEffect(() => {
    buildsFetcher.submit({ status: 'SUCCESS' }, { method: 'post', action: '/resources/builds' });
  }, []);

  const handleBuildsTableFiltersChange = (filters: { page: number; status: BuildStatus }): void => {
    buildsFetcher.submit(
      {
        status: filters.status,
        page: filters.page,
      },
      { method: 'post', action: '/resources/builds' },
    );
  };

  return (
    <div className="container mx-auto py-8 space-y-8">
      <h1 className="text-3xl font-bold mb-6">Analytics Dashboard</h1>
      <WithErrorHandling queryData={keyMetrics} render={(keyMetricsData) => <KeyMetrics data={keyMetricsData} />} />

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <WithErrorHandling
          queryData={userGrowth}
          render={(userGrowthData) => <UserGrowthChart data={userGrowthData} />}
        />
        <WithErrorHandling
          queryData={usersBySignupMethod}
          render={(usersBySignupMethodData) => <SignupMethodChart data={usersBySignupMethodData} />}
        />
      </div>

      <WithErrorHandling
        queryData={buildsFetcher.data}
        render={(buildsData) => (
          <BuildsTable
            builds={buildsData.builds}
            buildsCount={buildsData.buildsCount}
            isLoading={buildsFetcher.state === 'submitting'}
            onFiltersChange={handleBuildsTableFiltersChange}
          />
        )}
      />
    </div>
  );
}
        </liblabAction>

        <liblabAction type="file" filePath="app/routes/_index.tsx">
import { useLoaderData } from '@remix-run/react';
import { ErrorComponent } from '@/components/building-blocks/error-component/error-component';
import AnalyticsDashboard, { loader as analyticsDashboardLoader } from './analytics-dashboard';

export async function loader() {
  return analyticsDashboardLoader();
}

export default function Index() {
  const data = useLoaderData<typeof loader>();

  if ('error' in data) {
    return <ErrorComponent errorMessage={data.error} />;
  }

  return <AnalyticsDashboard {...data} />;
}
        </liblabAction>

        <liblabAction type="start">npm run dev</liblabAction>
      </liblabArtifact>
    </assistant_response>
  </example>
</examples>
